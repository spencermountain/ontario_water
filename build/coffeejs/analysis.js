// Generated by CoffeeScript 1.8.0
var diff, format_audio, format_seconds, format_video, humanFileSize, metadata, path, play, pretty_print, run_sync, shell, timeSince;

shell = require("shelljs");

path = require("path");

run_sync = require("./cmd");

format_seconds = function(i) {
  var s;
  if (i == null) {
    i = 0;
  }
  i = parseFloat(i);
  if (i > 60) {
    s = parseInt(i % 60);
    if (s < 10) {
      s = "0" + s;
    }
    return parseInt(i / 60) + ":" + s;
  }
  return i.toFixed(1) + "seconds";
};

timeSince = function(date) {
  var interval, seconds;
  seconds = Math.floor((new Date() - date) / 1000);
  interval = Math.floor(seconds / 31536000);
  if (interval > 1) {
    return interval + " years ago";
  }
  interval = Math.floor(seconds / 2592000);
  if (interval > 1) {
    return interval + " months ago";
  }
  interval = Math.floor(seconds / 86400);
  if (interval > 1) {
    return interval + " days ago";
  }
  interval = Math.floor(seconds / 3600);
  if (interval > 1) {
    return interval + " hours ago";
  }
  interval = Math.floor(seconds / 60);
  if (interval > 1) {
    return interval + " minutes ago";
  }
  return Math.floor(seconds) + " seconds ago";
};

humanFileSize = function(bytes, si) {
  var thresh, u, units;
  if (bytes == null) {
    bytes = 0;
  }
  thresh = (si ? 1000 : 1024);
  if (bytes < thresh) {
    return bytes + " B";
  }
  units = ["kb", "Mb", "Gb", "Tb", "Pb", "Eb", "Zb", "Yb"];
  u = -1;
  while (true) {
    bytes /= thresh;
    ++u;
    if (!(bytes >= thresh)) {
      break;
    }
  }
  return bytes.toFixed(1) + " " + units[u];
};

format_audio = function(obj) {
  var date;
  if (!obj) {
    return undefined;
  }
  obj.tags = obj.tags || {};
  date = void 0;
  if (obj.tags.creation_time) {
    date = timeSince(new Date(obj.tags.creation_time));
  }
  return {
    type: obj.codec_name,
    channels: obj.channel_layout + "(" + (obj.channels || 0) + ")",
    created: date,
    meta: JSON.stringify(obj.tags)
  };
};

format_video = function(obj) {
  var date;
  if (!obj) {
    return undefined;
  }
  date = void 0;
  if (obj.tags.creation_time) {
    date = timeSince(new Date(obj.tags.creation_time));
  }
  return {
    type: obj.codec_name,
    size: obj.width + "x" + obj.height,
    created: date,
    meta: JSON.stringify(obj.tags)
  };
};

metadata = function(file) {
  var audio, cmd, data, name, obj, video;
  cmd = "ffprobe -v quiet -print_format json -show_format -show_streams " + file;
  data = JSON.parse(run_sync(cmd));
  data.format = data.format || {};
  name = path.basename(data.format.filename);
  audio = data.streams.filter(function(s) {
    return s.codec_type === "audio";
  });
  video = data.streams.filter(function(s) {
    return s.codec_type === "video";
  });
  obj = {
    name: name,
    length: format_seconds(data.format.duration || 0),
    size: humanFileSize(data.format.size),
    bytes: data.format.size,
    tracks: "" + audio.length + " audio, " + video.length + " video",
    audio: format_audio(audio[0]),
    video: format_video(video[0])
  };
  return obj;
};

pretty_print = function(file) {
  var obj;
  obj = metadata(file);
  console.log("================= " + obj.name + " =================");
  delete obj.name;
  return Object.keys(obj).forEach(function(k) {
    if (typeof obj[k] === "object") {
      console.log(" " + k + "-");
      return Object.keys(obj[k]).forEach(function(k2) {
        if (obj[k][k2]) {
          return console.log("   " + k2 + ": " + obj[k][k2]);
        }
      });
    } else {
      if (obj[k]) {
        return console.log(" " + k + " :  " + obj[k]);
      }
    }
  });
};

play = function(file) {
  return run_sync("ffplay " + file + " -autoexit -exitonkeydown -exitonmousedown -loop 2");
};

diff = function(input, output) {
  var after, before, bytes, percent;
  before = metadata(input);
  after = metadata(output);
  bytes = before.bytes - after.bytes;
  percent = parseInt((after.bytes / before.bytes) * 100);
  percent = 100 - percent;
  return console.log("   -reduced by " + percent + "%  (" + before.size + " -> " + after.size + ")");
};

module.exports = {
  metadata: metadata,
  pretty_print: pretty_print,
  diff: diff,
  play: play
};

//# sourceMappingURL=analysis.js.map
